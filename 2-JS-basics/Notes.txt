INTRODUCTION ---

* JavaScript was first called as LiveScript and changed to JavaScript in 1996 to attract Java developers. JavaScript has almost nothing to with Java.

* In 1997, JavaScript was submitted to ECMA International in order to create a new standard. ECMAScript1 or ES1 became the first version of JavaScript.

* In real world, we use ECMASCript for language standard and JavaScript for language in practice.

* In 2009, ES5 was released with lot of new features. 

* And in 2015, ES6/ES2015 was released, the biggest update to the language ever! ES2015 is official name but most people call ES6.

* After this, it started releasing every year with new features instead of waiting for two-three years. 

* ES5 supported in all browsers and is ready to use.

* ES6/ES7/ES8 - well supported in modern browsers but has got no support in old browsers.

* To overcome this, we can basically convert these newer versions to ES5 using process called
transpiling and polyfilling.

* ES9 and ES10 are sometimes called ESNext. Some browsers even support this. 

* JavaScript is a lightweight, cross-platform, object-oriented computer programming language.
    * Lightweight - Doesn't use much memory, relatively simple syntax and features.
    * Cross-platform - means that the language can be used on multiple platforms and systems and not just for web development.
    * Object-oriented - means that this language is based on objects.

* Along with HTML and CSS, JavaScript is one of the three core technologies of web development.
* Today, JavaScript can be used in different places:
    * Client side: JavaScript was traditionally used only in the browser environment which means it was only a client side language.
    * Lately, because of node.js, we can use it as server side language as well.
    
* JavaScript is what made modern web development possible.
    * It not only allows dynamic effects to simple website and interactivity but also complex modern web applications that we can interact with almost every app that we use every single day.
    
* Frameworks/libraries like React and Angular are 100% based on Javascript.


* HTML, CSS and JS work together to create interactive dynamic web applications.
    * All the contents on the webpage is created using HTML. 
    * CSS is responsible for presentation of the content. Mostly styling.
    * JS for adding real programming capability, interactivity to websites. 
    
* HTML is noun says that <p> element is noun. 
* CSS is adjective, because it describes the noun saying paragraph text should be of specific colour.
* JS is verb which says something like hide the paragraph.


VARIABLES AND DATA TYPES ---

* Variable is like container in which we can store a value in order to use it over and over again instead of having to write the value each time that we want to use it.
* In JS, there are 5 different Data Types - (Primitive Data types - they are non object data types.)
    * Number - always floating point numbers.
    * String - a sequence of characters (text).
    * Boolean - logical data type either true or false.
    * Undefined - automatically assigned to a variable that does not have a value yet.
    * Null - Also means non-existent.
    
* JS has a feature called DYNAMIC TYPING, data types are automatically assigned to variables. 

* Declaring variables with meaning full name and with camelcase notation.

* Variable names cannot start with numbers or symbols except for the dollar($) sign, Underscore(_) sign and letter, cannot have symbols in between and cannot have JS reserve keyword.


VARIABLE MUTATION AND TYPE COERCION --- 

* There are single line comments and multiline comments. 
    * Single line comment can be written by prefixing double slashes like this "//".
    * Multi line comments can be written by prefixing "/*" and ending it again by "*/".
    
* Type Coercion means JS automatically converts one type to another conviniently. Other programming languages needs explicit conversion.

* Variable Mutation is JS feature which converts the data type of a variable that was previously declared. Say for example 
    var age = 28; //number
    console.log(age); //prints 28
    age = 'twenty eight'; 
    console.log(age); //prints twenty eight. age which was Number is converted to String.
    
BASIC OPERATORS ---

* Subtract, Add, Multiply and Divide are basic MATH operators.
* Boolean which has logical value true or false is LOGICAL operator.
* Typeof operator returns what type of the variable is.

OPERATOR PRECEDENCE --- 

* Many operators in one line and how does JS know whichone to perform first or what sequence it should follow?
* Parenthesis has the highest precedence.
* Assignment operator = is also an operator which has least precedence, so equated atlast.
* There is a table which shows the precedence over one operator than the other.
* Multiple assignments are allowed in JS.
    for eg var x,y;
    x = y = 25;
* Each operator has an associativity which means whether to go from left to right or right to left.
    For eg: = operator goes from right to left
            + operator goes from left to right
            
IF/ELSE STATEMENTS --- 

* These are conditional statements. Inside the braces of 'if' will be a condition, if the condition is passes, if block will be executed.
* if the condition fails, else block will get executed.

BOOLEAN LOGIC ---

* Boolean logic is used in else if condition where the two conditions has to be met or either one of the conditions to be met. 

* Different boolen logic operators are -
    * AND - both conditions must be true.
    * OR - either one of the conditions must be true.
    * NOT - reverses the result of the condition.

TERNARY OPERATOR AND SWITCH STATEMENTS ---

* Ternary operators are used for simple if else statement. It is called ternary because it has three operators.

* Switch statements are used if there are multiple if else conditions to be validated. 

TRUTHY AND FALSY VALUES, EQUALITY OPERATOR ---

* In JS, a Falsy value is value that is considered false when evaluated in if/else statement condition.
* And the values that are falsy in the JS are undefined, null, 0 , empty strings and NaN values.
* They are not false, but turn out to be false when evaluated and thus the name falsy values.

* Truthy value is value that is considered true when evaluated in if/else statement condition.
* All the values that are not falsy.


* EQUALITY OPERATOR with triple === operator is strict comparison.
* There is another comparison with double == operator which does type coercion and compares. Means - the variables doesnt have to be of same data type. 

FUNCTIONS ---

* If you want a run a piece of code a lot of times, you can put that code in the function instead of writing it over and over again.

* Function are like containers which can hold lines of code and we pass arguments and they can then return us results.

* Functions are most important for one of the important principle of programming language called DRY principle. (Dont Repeat Yourself.)

* Never write same code again and again.

FUNCTION STATEMENTS AND FUNCTION EXPRESSIONS - --

* When we write function expressions, we start by writing function keyword without a name, put in argument list. 

* and we assign this function to a variable. 

* Function expression is a variable which has function as a value to it.

* Statements and expressions, they are global concepts in JS.

* JS Expressions are piece of code that always produces a value. It doesnt matter, how long they are. They will result in a single value, then its an expression.
    For ex: type of 23 // Number
            2 + 3 // 5
            var functionExpression = function() {
            
            } //function expression.
                       
* JS Statements, they also perform some action but they dont produce immediate result.
    For ex: if(true) {console.log(23)} //will print 23 and undefined. 23 is printed from console.log but statement itself doesnt return anything, means doesnt produce result.
    
* In conclusion, Function expressions produce immediate result whereas Function declarations doesnt. 

ARRAYS ---

* They are collection of variables. Can have different datatypes.

* They are zero based. First element is 0th index and so on.

* There are various methods that array has which helps in editing any given array.

* push() method adds the object at the end of the array.

* unshift() method also adds the object to the array but at the beginning of the array.

* pop() method deletes the element at the end of the array.

* shift() method deletes the element at the start of the array.

* indexOf() method retrieves the index of the value that is available in the array. It can be used to test if a particular element is available in the array or not. It will return -1 if the value is unavailable in the array.

OBJECTS AND PROPERTIES ---

* Objects are defined as key-value pairs. key being the name of the value.

* Access values instead of index(Array) but name.

* We can use objects to group different variables that belong together but has no particular order.

* One fundamental difference between arrays and objects is that, In arrays order matters a lot but in object it doesnt matter at all.

* Two ways of Initialising an object - 
        * Object Literal
            var john = {
                firstName: 'John'
            }
        * New Object syntax
            var jane = new Object();
            jane.firstName = 'Jane';
            
METHODS --- 

* We can even attach functions to objects and these functions are called methods.

* And can use "this" keyword to actually access one of the properties of object in the method to calculate something.

* As in the example js, we have used this keyword to access birthyear and calculate the age, we can use this keyword to set the age as well. Please refer Example in 16_Objects_and_Methods.js

LOOPS AND ITERATIONS ---

* If you have a very repitive tasks, instead of typing samething again and again, we run these into loops.

* for loop has three parts - initial value, condition and counter update(increment).

* while loop also does the same. But the difference between the while and for loop is, only has the condition. it will loop till the condition is true.

* break statement is to exit the loop even before the loop ends.

* continue statement is to skip that particular iteration and continue with the next iteration.

