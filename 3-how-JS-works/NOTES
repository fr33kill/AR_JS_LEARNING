WHAT HAPPENS TO OUR CODE ---

* JavaScript is always hosted on some environment. These environment will mostly be browser such as Google Chrome, firefox, safari etc., This is where JS runs.

* There can also be other environments such as nodejs, webserver and even some applications which will accept JS code input.

* Host, in this case browser has some kind of engine(JavaScript Engine) which takes our code and executes it.

* There are many different engines out there like Google V8 Engine that uses google chrome, but there are other engines like Spider Monkey, JavaScript Core etc.,

* Engine functions are as follows
    
    * Parser - parses our code line by line, checks line by line and verifies the syntax of our code is correct. This means parser knows the JS rules and how it has to be written and are valid.
    
    * Abstract Syntax tree - Once everything is correct, parser then produces a data structure known as the Abstract Syntax tree. 
    
    * Machine code - Then this is translated into a machine code, which is no more JS code. It is set of instructions that can be executed directly by computer processor.
    
    * Code runs - Only after the JS code is converted to machine code, our program runs. 
    
* Different engines do slightly differently.


EXECUTION CONTEXTS AND EXECUTION STACK ---

* All JS code needs to run in an environment. These environments are called Execution Contexts. Its like a container, or a wrapper which stores our variables and in which piece of our code is evaluvated and executed. 

* Default execution context is always Global Execution Context. The GEC has variables and functions that are not inside any of functions. 

* It is associated with the Global object. In the browser, that is window object.

* Each time we call a function, it creates a new, its own execution context. 

EXECUTION CONTEXT IN DETAIL: CREATION AND EXECUTION PHASES AND HOISTING ---

* Execution Context Object will have 3 properties -
    
    * Variable Object (VO) contains function arguments in a variable declarations as well as function declarations.
    * Scope Chain which contains current variable objects as well as variable objects of its parents. 
    * "This" variable 
    
* How Execution Context Object is created? - When function is called, a new execution context is put on top of execution stack. This happens in 2 phases - 

    * Creation Phase - 
        * Creation of the Variable Object (VO).
        * Creation of the Scope Chain.
        * Determine the value of "this" variable and is set. 
        
    * Execution Phase - 
        * The code of the function that generated the current execution context is run line by line and all the variables are defined. 
        * If its global context, then its global code is executed. 
        
* Variable Object (VO) - 
    * The argument object is created, containing all the arguments that were passed into the function.
    
    * Code is scanned for function declarations: for each function, a property is created in the Variable Object, pointing to the function. This means, all the functions will be stored in Variable Object, even before the code starts executing. 
    
    * Code is scanned for variable declarations: for each variable, a property is created in the Variable Object and set to Undefined. 
    
    * And these last two points is commonly called HOISTING.
    
    * Functions and Variables are hoisted in the JavaScript, which means they are available even before the execution phase starts. 
    
    * Functions and Variables are hoisted in different way though. The difference is that the functions are already defined before the execution phase starts whereas variables are set to "undefined" and gets defined only during Execution Phase. 
    
    * Execution Phase comes after the Creation Phase. 
    

SCOPING AND SCOPING CHAIN ---

* Scoping basically lets us know where can we access a certain variable or function?

* In JS, each function creates a Scope: the space/environment in which the variables that it defines are accessible.

* In other programming languages, scope is created even in if blocks, for blocks and while blocks but not in JS.

* In JS, to create a new scope is to write a new function. Also in JS, we have Lexical Scoping. It means a function that is lexically within other function gets access to the scope of the outer function. 

* Lexical scoping - the local scope having access to its variables and the parent variables. For example -  a variable "A" is declared and function "first" in global scope. function "first" has got a variable "B" and a function "second". The function "second" has a variable "C", in this case, function "second" can access its parent function's variable "B" and "A" because of Lexical Scoping.

* And this scope is called Scope Chain. Scope Chain goes from local scope to global scope and doesnt work backwards. 

* In the mentioned above example, global scope will never have access to variables "B" and "C" unless we return the values from the functions. So, locally scoped variables are not visible to their parent scopes.


"this" KEYWORD ---

* "this" variable is a variable that each and every execution context gets and is stored in the execution context object.

* In a regular function call, "this" keyword points at the global object, (the window object in the browser) -  Default.

* In a method call - "this" keyword points to the object that is calling the method. 

* "this" keyword is not assigned a value, until a function where it is defined is actually called.

* Eventhough, "this" variable is refers to a object where it is defined, the "this" variable is technically only assigned a value as soon as an object calls a method.

* "this" keyword is attached to the execution context which is only created as soon as the function is invoked.


* METHOD BORROWING - Borrowing a method from one object to another object. Check for the example in script.js file.





























    